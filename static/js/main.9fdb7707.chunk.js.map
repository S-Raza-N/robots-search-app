{"version":3,"sources":["components/Card.js","components/CardList.js","components/Searchbox.js","components/Scroll.js","components/ErrorBoundry.js","container/App.js","reportWebVitals.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","Searchbox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","target","value","fetch","then","response","json","users","filteredrobots","filter","robot","toLowerCase","includes","length","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"kOAkBeA,EAbF,SAAC,GAAwB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GAC3B,OAEC,sBAAKC,UAAW,uDAAhB,UACG,qBAAKC,IAAK,SAASC,IAAG,+BAA2BH,EAA3B,cACtB,gCACG,mCAAMF,EAAN,OACA,kCAAKC,EAAL,cCeOK,EAtBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAElB,OAEC,8BAECA,EAAOC,KAAI,SAACC,EAAMC,GACjB,OACC,cAAC,EAAD,CAEAR,GAAMK,EAAOG,GAAGR,GAChBF,KAAQO,EAAOG,GAAGV,KAClBC,MAASM,EAAOG,GAAGT,OAHbS,SCQIC,EAZG,SAAC,GAAiC,EAAhCC,YAAiC,IAApBC,EAAmB,EAAnBA,aAChC,OACI,qBAAKV,UAAW,OAAhB,SACE,uBACAA,UAAY,mCACZW,KAAM,SACNC,YAAa,gBACbC,SAAWH,OCSHI,EAhBA,SAACC,GAIf,OAMC,aAJA,CAIA,OAAKC,MAAQ,CAAEC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,SAAvE,SACEJ,EAAMK,YCGKC,E,kDArBd,WAAYN,GAAQ,IAAD,8BAClB,cAAMA,IACDO,MAAQ,CACZC,UAAU,GAHO,E,qDAQnB,SAAkBC,EAAOC,GACxBC,KAAKC,SAAS,CAAEJ,UAAU,M,oBAG3B,WACC,OAAIG,KAAKJ,MAAMC,SACP,0DAGDG,KAAKX,MAAMK,a,GAlBOQ,aC4FZC,G,wDAtEd,aAAc,IAAD,8BACN,gBAmBPC,eAAiB,SAACC,GAGjB,EAAKJ,SAAS,CAAClB,YAAasB,EAAMC,OAAOC,SArBzC,EAAKX,MAAQ,CACZlB,OAAQ,GACFK,YAAa,IAJR,E,qDAQV,WAAqB,IAAD,OAEnByB,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAM,SAAAG,GAAK,OAAI,EAAKX,SAAS,CAAEvB,OAAQkC,S,oBAsB5C,WAAS,IAAD,OAIDC,EAAkBb,KAAKJ,MAAMlB,OAAOoC,QAAQ,SAAAC,GACzC,OAAOA,EAAM5C,KAAK6C,cAAcC,SAAS,EAAKrB,MAAMb,YAAYiC,kBAInE,OAAgC,IAA7BhB,KAAKJ,MAAMlB,OAAOwC,OACb,oBAAI5C,UAAW,KAAf,+BAIN,sBAAKA,UAAW,KAAhB,UACE,oBAAIA,UAAW,KAAf,yBAIA,cAAC,EAAD,CAAWU,aAAiBgB,KAAKI,iBAC1B,cAAC,EAAD,UACD,cAAC,EAAD,UACH,cAAC,EAAD,CAAU1B,OAERmC,e,GA3DCX,cCXHiB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCEdO,IAASC,OACF,cAAC,EAAD,IACJC,SAASC,eAAe,SAM3BX,M","file":"static/js/main.9fdb7707.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\n// chil node of CardList.js\r\n\r\nconst Card = ({name, email, id }) => {\r\n\treturn (\r\n       \r\n\t\t<div className= ' tc bg-light-green dib br3 pa3 ma3 grow bw2 shadow-5'>\r\n\t\t   <img alt= 'robots' src= {`https://robohash.org/${id}?200x200`} />\r\n\t\t   <div>\r\n\t\t      <h2> {name} </h2>\r\n\t\t      <p> {email} </p> \r\n\t\t   </div>\r\n        </div>\r\n\t);\r\n}\r\n\r\nexport default Card; ","import React from 'react';\r\nimport Card from './Card';\r\n\r\n// chil node of App.js \r\n\r\nconst CardList = ({robots}) => {\r\n\r\n\treturn (\r\n           \r\n\t\t<div>\r\n\t\t{\r\n\t\t\trobots.map((user, i) => {\r\n\t\t\t\treturn( \r\n\t\t\t\t\t<Card \r\n\t\t\t\t\tkey= {i} \r\n\t\t\t\t\tid = {robots[i].id} \r\n\t\t\t\t\tname = {robots[i].name} \r\n\t\t\t\t\temail = {robots[i].email}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t);\r\n\t\t\t})\r\n\t\t}\r\n\t\t</div> \r\n\r\n\t\t);\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\n\r\n// chil node of App.js\r\n\r\n\r\n//we areusing destructuring here: ({searchfield, searchChange }) \r\n//which allows us to grab the props object and grab its properties\r\n//**searchfield is not used and will be removed in the upcomming videos.\r\n\r\nconst Searchbox = ({searchfield, searchChange }) => {\r\n\treturn(\r\n     <div className= 'pa2 '>\r\n       <input \r\n       className = 'pa3 ba b--green bg-lightest-blue'\r\n       type ='search' \r\n       placeholder= 'search robots' \r\n       onChange= {searchChange} />\r\n      </div>\r\n\t);\r\n}\r\n\r\nexport default Searchbox;","import React from 'react';\r\n\r\n//children \r\n // <Scroll> \r\n //        <CardList robots= {    : child of scroll\r\n //           //this.state.robots\r\n //            filteredrobots }/>            \r\n //         {/*state passed in as a prop to the CardList.*/}\r\n // </Scroll>  \r\n\r\nconst Scroll = (props) => {\r\n\t//every components has props as children\r\n\t//using this we can create components that wrap other components\r\n\r\n\treturn(\r\n\r\n\t\t//now just add styling \r\n\t\t//<div style= {{....}}> double curly brackets mean that\r\n\t\t//this is an JS expression and we are returning an Object in it\r\n        //that Object can have css styles\r\n\t\t<div style= {{ overflowY: 'scroll', border: '1px solid black', height: '500px' }}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t); \r\n};\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundry extends Component{\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\thasError: false\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tcomponentDidCatch(error, info) {\r\n\t\tthis.setState({ hasError: true })\r\n\t}\r\n\r\n\trender(){\r\n\t\tif (this.state.hasError){\r\n\t\t\treturn <h1> Ooops that is not good </h1>\r\n\t\t}\r\n\r\n\t\treturn this.props.children \r\n\t}\r\n}\r\n\r\nexport default ErrorBoundry;","import React, { Component } from 'react';\r\nimport CardList from '../components/CardList';\r\nimport Searchbox from '../components/Searchbox';\r\n//import {robots} from './robots';\r\nimport Scroll from '../components/Scroll'\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\nimport './App.css';\r\n\r\n// making a parent node \r\n// in order to app the app interactive the searchbox and the cardLists must communicate\r\n// we use the one way dataflow \r\n// as for them to communicate\r\n// they need to send info. to the App.js\r\n// in order to do this we have an idea of State in React\r\n// A 'State' is simply description of your app\r\n// It is an OBJECT that describes your application\r\n// i.e in our the robots and whatever is entered in our searchbox\r\n// props(properties) are simply fixed things that come out of our state which can change\r\n// parent nodes feeds the states to the child node\r\n// and the child node get the state as a prop(immutable).\r\n\r\n\r\n\r\nclass App extends Component {\r\n\tconstructor(){\r\n        super()\r\n\t\tthis.state = {\r\n\t\t\trobots: [],\r\n\t        searchfield: ''\r\n\t\t}\r\n\t}\r\n\r\n    componentDidMount() {\r\n    \t//one line of code broken into 3.\r\n    \tfetch('https://jsonplaceholder.typicode.com/users')\r\n    \t.then(response => response.json())\r\n    \t.then (users => this.setState({ robots: users }));\r\n    }\r\n\r\n\r\n\r\n    //function to change the robots with the input\r\n    //we say every time input changes we get an event\r\n    //and console.log is trigerred.\r\n\tonSearchChange = (event) => {\r\n        \r\n        //changing the state so that the search field always gets updated.  \r\n\t\tthis.setState({searchfield: event.target.value})\r\n\t}\r\n\r\n// If we look at above code, we've now communicated the search box with the app,\r\n// and we have the search field constantly changing. So now we need to communicate it to the \"filteredRobots\". What we can do is that \"filteredRobots\" can now\r\n// be used as props instead of \"this.state.robots\"\r\n\r\n// So cut and copy it from the above function to the function below And now we have access to \"filteredRobots\", \r\n// and instead of passing \"this.state.robots\" we simply pass \"filteredRobots\"\r\n\r\n\r\n\trender(){\r\n\r\n\t\t// If the name of the robots in lowercase includes (- and this does the comparison -) if anything in the string(searchfield) \"toLowerCase\",\r\n\t\t// well, then only return the robots that returns true to this. \r\n\t\tconst filteredrobots =  this.state.robots.filter( robot => {\r\n           return robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n\t\t})\r\n        \r\n\r\n        if(this.state.robots.length === 0){\r\n        \treturn <h1 className= 'tc'> ....Loading.... </h1>\r\n\r\n        }else{\r\n        \treturn (\r\n        \t\t<div className= 'tc'>\r\n        \t\t  <h1 className= 'f1'>ROBOFRIENDS</h1>\r\n\r\n\t\t           {/*// {we add this.onSearchChange cauz it is now an object in the class\r\n\t\t           //     which is equalent to saying App.onSearchChange}*/}\r\n\t\t          <Searchbox searchChange = { this.onSearchChange } />\r\n                 { <Scroll>\r\n                 \t<ErrorBoundry>\r\n\t\t             <CardList robots= {\r\n\t\t  \t           //this.state.robots\r\n\t\t  \t            filteredrobots }/> \r\n\t\t  \t         </ErrorBoundry>              \r\n\t\t                {/*state passed in as a prop to the CardList.*/}\r\n\t\t           </Scroll>    }\r\n\t\t       </div>\r\n\t\t  );\t\r\n        }\r\n\t  \r\n\t} \r\n\r\n}\r\n\r\nexport default App; ","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './container/App'; \nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\n\n\n\nReactDOM.render(\n       <App />\n  ,document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}